#!/usr/bin/env python3
"""
Species Profile JSON Import Script

This script imports species profile data from JSON files generated by the LLM
processing system. It handles species data, conservation profiles, and references.
"""

import json
import sys
import os
from pathlib import Path
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional

# Add parent directory to path for importing modules
sys.path.append(str(Path(__file__).parent.parent))

# Direct Supabase import
try:
    from supabase import create_client, Client
    from dotenv import load_dotenv
    
    # Load environment variables
    env_path = Path(__file__).parent.parent / 'config' / '.env'
    load_dotenv(env_path)
    
    # Get credentials
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_ANON_KEY')
    
    if not supabase_url or not supabase_key:
        print("❌ Missing Supabase credentials in .env file")
        sys.exit(1)
    
    # Create client
    supabase: Client = create_client(supabase_url, supabase_key)
    print("✅ Supabase client created successfully")
    
except Exception as e:
    print(f"❌ Error creating Supabase client: {e}")
    sys.exit(1)

def load_json_file(file_path: Path) -> Dict[str, Any]:
    """Load and parse JSON file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"❌ Error loading JSON file {file_path}: {e}")
        return {}

def find_species_by_scientific_name(scientific_name: str) -> Optional[str]:
    """Find species ID by scientific name"""
    try:
        response = supabase.table('species').select('id').eq('scientific_name', scientific_name).execute()
        if response.data and len(response.data) > 0:
            return response.data[0]['id']
        return None
    except Exception as e:
        print(f"❌ Error finding species '{scientific_name}': {e}")
        return None

def update_species_record(species_data: Dict[str, Any]) -> bool:
    """Update or insert species record"""
    try:
        scientific_name = species_data.get('scientific_name')
        if not scientific_name:
            print("❌ Missing scientific_name in species data")
            return False
        
        print(f"🔄 Processing species: {scientific_name}")
        
        # Check if species exists
        existing_id = find_species_by_scientific_name(scientific_name)
        
        if existing_id:
            # Update existing species
            print(f"  ✅ Found existing species (ID: {existing_id}), updating...")
            response = supabase.table('species').update(species_data).eq('id', existing_id).execute()
        else:
            # Insert new species
            print(f"  🔧 Creating new species record...")
            response = supabase.table('species').insert(species_data).execute()
        
        if response.data and len(response.data) > 0:
            species_id = response.data[0]['id']
            print(f"  ✅ Species record processed successfully (ID: {species_id})")
            return True
        else:
            print(f"  ❌ Failed to process species record: {response}")
            return False
            
    except Exception as e:
        print(f"  ❌ Error processing species record: {e}")
        return False

def import_references(references_data: List[Dict[str, Any]]) -> Dict[str, str]:
    """Import references and return mapping of full_citation to reference_id"""
    reference_mapping = {}
    
    try:
        for i, ref in enumerate(references_data):
            if not ref.get('title') or not ref.get('full_citation'):
                print(f"  ⚠️  Skipping incomplete reference: {ref}")
                continue
            
            # Create unique source_id from title and year
            source_id = f"{ref['title'][:50].replace(' ', '_')}_{ref.get('year', 'unknown')}_{i}"
            
            # Create reference record matching the actual schema
            ref_record = {
                'source_id': source_id,
                'title': ref['title'],
                'authors': ', '.join(ref['authors']) if isinstance(ref.get('authors'), list) else ref.get('authors', ''),
                'journal': ref.get('journal'),
                'year': ref.get('year'),
                'doi': ref.get('doi'),
                'full_citation': ref['full_citation']
            }
            
            # Check if reference already exists by source_id or DOI
            existing_ref = None
            if ref.get('doi'):
                response = supabase.table('references').select('id').eq('doi', ref['doi']).execute()
                if response.data and len(response.data) > 0:
                    existing_ref = response.data[0]['id']
            
            if not existing_ref:
                response = supabase.table('references').select('id').eq('source_id', source_id).execute()
                if response.data and len(response.data) > 0:
                    existing_ref = response.data[0]['id']
            
            if existing_ref:
                print(f"  ✅ Found existing reference: {ref['title'][:50]}...")
                reference_mapping[ref['full_citation']] = existing_ref
            else:
                # Insert new reference
                response = supabase.table('references').insert(ref_record).execute()
                if response.data and len(response.data) > 0:
                    new_ref_id = response.data[0]['id']
                    print(f"  ✅ Created new reference: {ref['title'][:50]}...")
                    reference_mapping[ref['full_citation']] = new_ref_id
                else:
                    print(f"  ❌ Failed to create reference: {ref['title'][:50]}...")
    
    except Exception as e:
        print(f"❌ Error importing references: {e}")
    
    return reference_mapping

def create_conservation_profile(profile_data: Dict[str, Any], species_id: str, reference_ids: List[str]) -> bool:
    """Create conservation profile record"""
    try:
        scientific_name = profile_data.get('species_scientific_name')
        if not scientific_name:
            print("❌ Missing species_scientific_name in profile data")
            return False
        
        print(f"🔄 Creating conservation profile for: {scientific_name}")
        
        # Create profile record (using actual table structure)
        profile_record = {
            'species_id': species_id,
            'profile_id': f"{scientific_name.replace(' ', '_')}_profile",
            'file_source': 'LLM_generated',
            'subpopulations': profile_data.get('content', {}).get('subpopulations', ''),
            'distribution_range': profile_data.get('content', {}).get('distribution_range', '')
        }
        
        # Check if profile already exists
        response = supabase.table('conservation_profiles').select('id').eq('species_id', species_id).execute()
        
        if response.data and len(response.data) > 0:
            # Update existing profile
            profile_id = response.data[0]['id']
            print(f"  ✅ Found existing profile (ID: {profile_id}), updating...")
            response = supabase.table('conservation_profiles').update(profile_record).eq('id', profile_id).execute()
        else:
            # Insert new profile
            print(f"  🔧 Creating new conservation profile...")
            response = supabase.table('conservation_profiles').insert(profile_record).execute()
            if response.data and len(response.data) > 0:
                profile_id = response.data[0]['id']
        
        if response.data and len(response.data) > 0:
            print(f"  ✅ Conservation profile processed successfully")
            
            # Link references to profile
            if reference_ids:
                print(f"  🔗 Linking {len(reference_ids)} references to profile...")
                for ref_id in reference_ids:
                    try:
                        link_record = {
                            'profile_id': profile_id,
                            'reference_id': ref_id
                        }
                        supabase.table('profile_references').insert(link_record).execute()
                    except Exception as e:
                        print(f"    ⚠️  Warning: Could not link reference {ref_id}: {e}")
                print(f"  ✅ Reference linking completed")
            
            return True
        else:
            print(f"  ❌ Failed to process conservation profile: {response}")
            return False
            
    except Exception as e:
        print(f"❌ Error creating conservation profile: {e}")
        return False

def process_species_json(json_data: Dict[str, Any]) -> bool:
    """Process complete species JSON data"""
    try:
        # Extract the three main components
        species_data = json_data.get('species_data', {})
        conservation_profile = json_data.get('conservation_profile', {})
        references_data = json_data.get('references', [])
        
        if not species_data.get('scientific_name'):
            print("❌ Missing species data or scientific name")
            return False
        
        scientific_name = species_data['scientific_name']
        print(f"\n🚀 Processing complete profile for: {scientific_name}")
        
        # Step 1: Import references
        print(f"\n📚 Importing {len(references_data)} references...")
        reference_mapping = import_references(references_data)
        reference_ids = list(reference_mapping.values())
        
        # Step 2: Update species record
        print(f"\n🐋 Updating species record...")
        if not update_species_record(species_data):
            print(f"❌ Failed to update species record for {scientific_name}")
            return False
        
        # Step 3: Get species ID
        species_id = find_species_by_scientific_name(scientific_name)
        if not species_id:
            print(f"❌ Could not find species ID for {scientific_name}")
            return False
        
        # Step 4: Create conservation profile
        print(f"\n📋 Creating conservation profile...")
        if not create_conservation_profile(conservation_profile, species_id, reference_ids):
            print(f"❌ Failed to create conservation profile for {scientific_name}")
            return False
        
        print(f"\n🎉 Successfully processed complete profile for {scientific_name}")
        return True
        
    except Exception as e:
        print(f"❌ Error processing species JSON: {e}")
        return False

def main():
    """Main import function"""
    if len(sys.argv) != 2:
        print("Usage: python import_species_json.py <json_file_path>")
        print("Example: python import_species_json.py species_data/scite/processed/narwhal_profile.json")
        sys.exit(1)
    
    json_file_path = Path(sys.argv[1])
    
    if not json_file_path.exists():
        print(f"❌ JSON file not found: {json_file_path}")
        sys.exit(1)
    
    print(f"🔧 Loading JSON data from: {json_file_path}")
    json_data = load_json_file(json_file_path)
    
    if not json_data:
        print("❌ Failed to load JSON data")
        sys.exit(1)
    
    # Process the JSON data
    success = process_species_json(json_data)
    
    if success:
        print(f"\n✅ Import completed successfully!")
    else:
        print(f"\n❌ Import failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
